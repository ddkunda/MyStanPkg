// Generated by rstantools.  Do not edit by hand.

/*
    MyStanPkg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MyStanPkg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MyStanPkg.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_my_stan_model2_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 27> locations_array__ =
  {" (found before start of program)",
  " (in 'my_stan_model2', line 17, column 2 to column 10)",
  " (in 'my_stan_model2', line 18, column 2 to column 12)",
  " (in 'my_stan_model2', line 19, column 2 to column 21)",
  " (in 'my_stan_model2', line 20, column 2 to column 18)",
  " (in 'my_stan_model2', line 24, column 2 to column 44)",
  " (in 'my_stan_model2', line 25, column 2 to column 46)",
  " (in 'my_stan_model2', line 26, column 2 to column 46)",
  " (in 'my_stan_model2', line 27, column 2 to column 43)",
  " (in 'my_stan_model2', line 30, column 4 to column 81)",
  " (in 'my_stan_model2', line 31, column 4 to column 38)",
  " (in 'my_stan_model2', line 29, column 17 to line 32, column 3)",
  " (in 'my_stan_model2', line 29, column 2 to line 32, column 3)",
  " (in 'my_stan_model2', line 2, column 2 to column 17)",
  " (in 'my_stan_model2', line 3, column 8 to column 9)",
  " (in 'my_stan_model2', line 3, column 2 to column 21)",
  " (in 'my_stan_model2', line 4, column 8 to column 9)",
  " (in 'my_stan_model2', line 4, column 2 to column 25)",
  " (in 'my_stan_model2', line 5, column 2 to column 22)",
  " (in 'my_stan_model2', line 7, column 2 to column 19)",
  " (in 'my_stan_model2', line 8, column 2 to column 28)",
  " (in 'my_stan_model2', line 9, column 2 to column 21)",
  " (in 'my_stan_model2', line 10, column 2 to column 30)",
  " (in 'my_stan_model2', line 11, column 2 to column 21)",
  " (in 'my_stan_model2', line 12, column 2 to column 30)",
  " (in 'my_stan_model2', line 13, column 2 to column 18)",
  " (in 'my_stan_model2', line 14, column 2 to column 27)"};
#include <stan_meta_header.hpp>
class model_my_stan_model2 final : public model_base_crtp<model_my_stan_model2> {
private:
  int N;
  std::vector<double> dose;
  std::vector<double> response;
  double sigma;
  double prior_E0_mu;
  double prior_E0_sd;
  double prior_Emax_mu;
  double prior_Emax_sd;
  double prior_EC50_mu;
  double prior_EC50_sd;
  double prior_h_mu;
  double prior_h_sd;
public:
  ~model_my_stan_model2() {}
  model_my_stan_model2(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_my_stan_model2_namespace::model_my_stan_model2";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 13;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("dose", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "dose", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      dose = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      dose = context__.vals_r("dose");
      current_statement__ = 16;
      stan::math::validate_non_negative_index("response", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "response", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      response = std::vector<double>(N,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      response = context__.vals_r("response");
      current_statement__ = 18;
      context__.validate_dims("data initialization", "sigma", "double",
        std::vector<size_t>{});
      sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "prior_E0_mu", "double",
        std::vector<size_t>{});
      prior_E0_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      prior_E0_mu = context__.vals_r("prior_E0_mu")[(1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization", "prior_E0_sd", "double",
        std::vector<size_t>{});
      prior_E0_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 20;
      prior_E0_sd = context__.vals_r("prior_E0_sd")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "prior_E0_sd",
        prior_E0_sd, 0);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "prior_Emax_mu",
        "double", std::vector<size_t>{});
      prior_Emax_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 21;
      prior_Emax_mu = context__.vals_r("prior_Emax_mu")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization", "prior_Emax_sd",
        "double", std::vector<size_t>{});
      prior_Emax_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 22;
      prior_Emax_sd = context__.vals_r("prior_Emax_sd")[(1 - 1)];
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "prior_Emax_sd",
        prior_Emax_sd, 0);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "prior_EC50_mu",
        "double", std::vector<size_t>{});
      prior_EC50_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      prior_EC50_mu = context__.vals_r("prior_EC50_mu")[(1 - 1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization", "prior_EC50_sd",
        "double", std::vector<size_t>{});
      prior_EC50_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 24;
      prior_EC50_sd = context__.vals_r("prior_EC50_sd")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "prior_EC50_sd",
        prior_EC50_sd, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "prior_h_mu", "double",
        std::vector<size_t>{});
      prior_h_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      prior_h_mu = context__.vals_r("prior_h_mu")[(1 - 1)];
      current_statement__ = 26;
      context__.validate_dims("data initialization", "prior_h_sd", "double",
        std::vector<size_t>{});
      prior_h_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 26;
      prior_h_sd = context__.vals_r("prior_h_sd")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "prior_h_sd",
        prior_h_sd, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_my_stan_model2";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_my_stan_model2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ E0 = DUMMY_VAR__;
      current_statement__ = 1;
      E0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ Emax = DUMMY_VAR__;
      current_statement__ = 2;
      Emax = in__.template read<local_scalar_t__>();
      local_scalar_t__ EC50 = DUMMY_VAR__;
      current_statement__ = 3;
      EC50 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ h = DUMMY_VAR__;
      current_statement__ = 4;
      h = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      {
        current_statement__ = 5;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(E0, prior_E0_mu,
                         prior_E0_sd));
        current_statement__ = 6;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Emax, prior_Emax_mu,
                         prior_Emax_sd));
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(EC50, prior_EC50_mu,
                         prior_EC50_sd));
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(h, prior_h_mu,
                         prior_h_sd));
        current_statement__ = 12;
        for (int i = 1; i <= N; ++i) {
          local_scalar_t__ mu_i = DUMMY_VAR__;
          current_statement__ = 9;
          mu_i = (E0 + ((Emax *
            stan::math::pow(
              stan::model::rvalue(dose, "dose", stan::model::index_uni(i)), h))
            / (stan::math::pow(EC50, h) +
            stan::math::pow(
              stan::model::rvalue(dose, "dose", stan::model::index_uni(i)), h))));
          current_statement__ = 10;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(response, "response",
                             stan::model::index_uni(i)), mu_i, sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_my_stan_model2_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double E0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      E0 = in__.template read<local_scalar_t__>();
      double Emax = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Emax = in__.template read<local_scalar_t__>();
      double EC50 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      EC50 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double h = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      h = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      out__.write(E0);
      out__.write(Emax);
      out__.write(EC50);
      out__.write(h);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ E0 = DUMMY_VAR__;
      current_statement__ = 1;
      E0 = in__.read<local_scalar_t__>();
      out__.write(E0);
      local_scalar_t__ Emax = DUMMY_VAR__;
      current_statement__ = 2;
      Emax = in__.read<local_scalar_t__>();
      out__.write(Emax);
      local_scalar_t__ EC50 = DUMMY_VAR__;
      current_statement__ = 3;
      EC50 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, EC50);
      local_scalar_t__ h = DUMMY_VAR__;
      current_statement__ = 4;
      h = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, h);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "E0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "Emax", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "EC50", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "h", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ E0 = DUMMY_VAR__;
      current_statement__ = 1;
      E0 = context__.vals_r("E0")[(1 - 1)];
      out__.write(E0);
      local_scalar_t__ Emax = DUMMY_VAR__;
      current_statement__ = 2;
      Emax = context__.vals_r("Emax")[(1 - 1)];
      out__.write(Emax);
      local_scalar_t__ EC50 = DUMMY_VAR__;
      current_statement__ = 3;
      EC50 = context__.vals_r("EC50")[(1 - 1)];
      out__.write_free_lb(0, EC50);
      local_scalar_t__ h = DUMMY_VAR__;
      current_statement__ = 4;
      h = context__.vals_r("h")[(1 - 1)];
      out__.write_free_lb(0, h);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"E0", "Emax", "EC50", "h"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "E0");
    param_names__.emplace_back(std::string() + "Emax");
    param_names__.emplace_back(std::string() + "EC50");
    param_names__.emplace_back(std::string() + "h");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "E0");
    param_names__.emplace_back(std::string() + "Emax");
    param_names__.emplace_back(std::string() + "EC50");
    param_names__.emplace_back(std::string() + "h");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"E0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Emax\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"EC50\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"E0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Emax\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"EC50\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_my_stan_model2_namespace::model_my_stan_model2;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_my_stan_model2_namespace::profiles__;
}
#endif
#endif
